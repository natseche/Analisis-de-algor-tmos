def LCS_iterativo(X, Y):
    m = len(X)
    n = len(Y)

    #Construir la tabla LCS 
    Z = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if X[i - 1] == Y[j - 1]:
                Z[i][j] = Z[i - 1][j - 1] + 1
            else:
                Z[i][j] = max(Z[i - 1][j], Z[i][j - 1])

    #Realizar "backtracking" 
    i, j = m, n
    lcs = []

    while i > 0 and j > 0:
        if X[i - 1] == Y[j - 1]:
            lcs.append(X[i - 1])
            i -= 1
            j -= 1
        elif Z[i - 1][j] >= Z[i][j - 1]:
            i -= 1
        else:
            j -= 1

    lcs.reverse()
    return (len(lcs), lcs)

# Ejemplos de uso
W1 = ["A", "B", "C", "B", "D", "A", "B"]
P1 = ["B", "D", "C", "A", "B", "A"]

A1 = [1, 0, 0, 1, 0, 1, 0, 1]
B1 = [0, 1, 0, 1, 1, 0, 1, 1, 0]

# Llamadas al c√≥digo y resultados
resultado1 = LCS_iterativo(W1, P1)
resultado2 = LCS_iterativo(A1, B1)

# Imprimir los resultados
print(resultado1)  
print(resultado2)  
